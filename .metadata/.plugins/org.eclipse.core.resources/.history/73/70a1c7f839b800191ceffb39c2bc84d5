<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="12c76885-a91c-4de0-b4ec-f4c6cd8868d8" >
		<http:listener-connection host="${http.host}" port="${http.port}" />
	</http:listener-config>
	<configuration doc:name="Configuration" doc:id="d42d705d-c790-4198-a860-a41ce8bc0fcb" defaultErrorHandler-ref="globalError_Handler" />
	<configuration-properties doc:name="Configuration properties" doc:id="dc692723-a8bb-4ef1-bb5b-13aec3d05971" file="config.yaml" />
	<flow name="fullfillmentFlow" doc:id="9badb4ca-85b6-450f-be7b-22b71bc01477" >
		<http:listener doc:name="Listener" doc:id="2328d2b0-89a0-411f-a9cb-b9fccbad1b5d" path="/fullfillment" config-ref="HTTP_Listener_config" outputMimeType="application/json"/>
		<set-variable value="#[payload.Envelope.Body]" doc:name="originalReq" doc:id="7e94de70-75fc-4d53-919e-c33c405c4489" variableName="originalReq" mimeType="application/json"/>
		<ee:transform doc:name="jsonToXml" doc:id="62ecfaf3-a02f-4924-906e-bd40c6c1700f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://schemas.xmlsoap.org/soap/envelope/
ns ns01 http://webservices.sabre.com/pnrbuilder/v1_18
---
{
	ns0#Envelope: {
		ns0#Body: {
			ns01#GetReservationRQ: {
				ns01#Locator: payload.request.pnr,
				ns01#RequestType: payload.request.orderDetails.passengerDetails."type",
				ns01#ReturnOptions: {
					ns01#ViewName: payload.request.orderDetails.passengerDetails.nameNumber,
					ns01#ResponseFormat: "application/xml"
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="reservation" doc:id="df5c57ed-dae0-4a72-b03e-d7ec1be0605f" name="flow_getReservation"/>
		<flow-ref doc:name="payment" doc:id="474fc5c2-d298-4e0a-bfd2-218262cc55ab" name="flow_payment"/>
		<flow-ref doc:name="miscfee" doc:id="0ec65ae5-e367-402e-b77e-8372ef42a17d" name="flow_miscfee"/>
		<flow-ref doc:name="fraud" doc:id="93feb938-3a39-4da7-a4d3-3d2b5e15082c" name="flow_fraud"/>
		<ee:transform doc:name="Transform Message" doc:id="69836e59-ceb2-4ab3-ade5-c48ba78b0c34" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 http://www.opentravel.org/OTA/2003/05/beta
ns ns01 http://schemas.xmlsoap.org/soap/envelope/
ns ns02 http://webservices.sabre.com/pnrbuilder/v1_18
ns ns03 http://www.sabre.com/ns/Ticketing/misc/1.0
ns ns04 http://services.sabre.com/STL/v01
---
{
	response: {
		status: {
			code: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@ResultCode,
			message: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@Description
		},
		paymentResults: {
			status: {
				code: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@ResultCode,
				message: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@Description
			},
			resultCode: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@ResultCode,
			posAction: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@POSActionCode,
			sabreTransactionId: vars.paymentPayload.ns0#PaymentRS.@SabreTransactionID as String,
			payments: [{
				status: {
					code: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@ResultCode
				},
				responseCode: vars.paymentPayload.ns0#PaymentRS.ns0#Results.ns0#AuthorizationResult.@ResponseCode,
				fraudCheckResult: vars.FraudPayload.ns0#FraudCheckRS.ns0#FraudScreenResult.@Result,
				details: {
					paymentId: vars.originalReq.request.paymentData.payment.details.paymentId default 1,
					amount: {
						value: vars.originalReq.request.paymentData.payments.details.amount.value,
						currency: vars.originalReq.request.paymentData.payments.details.amount.currency
					},
					approvalCode: vars.paymentPayload.ns0#PaymentRS.ns0#Results.ns0#AuthorizationResult.@ApprovalCode,
					remarks: vars.paymentpayload.ns0#PaymentRS.ns0#Results.ns0#AuthorizationResult.ns0#Remarks.*ns0#Remark
			
				},
				fraudCheckRemarks: vars.FraudPayload.ns0#FraudCheckRS.ns0#FraudRemarks.ns0#Remarks1
			}],
			allRemarksAddedToReservation: vars.originalReq.request.ticketingData.ticket
		},
		ticketingResults: ([{
			ticketingId: vars.originalReq.request.ticketingData.emd.ticketingId,
			status: {
				code: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@ResultCode,
				message: vars.paymentPayload.ns0#PaymentRS.ns0#Result.@Description
			}
		}]) ++ (vars.originalReq.request.ticketingData.emd.*emdDocuments map( emdDocument , indexOfEmdDocument ) -> {
			issuedDocumentNumbers: emdDocument.documentAssociation[0].ticketNumber
			
		})
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="flow_getReservation" doc:id="f56f9c32-7067-4be4-8f4e-4797b779c3a0" >
		<flow-ref doc:name="getreservation_flow" doc:id="c363cd5f-c5a1-4003-9a55-35e68e43dd3d" name="getreservation_flow"/>
		<set-variable value="#[payload.Envelope.Body]" doc:name="getreservationRS" doc:id="6851d64b-562f-4159-9ac8-69e57b5a0e20" variableName="getreservationRS"/>
		<ee:transform doc:name="Transform Message" doc:id="c4c8412d-5441-4559-bf27-d6d444c4f1a7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns stl18 http://webservices.sabre.com/pnrbuilder/v1_18
ns ns6 http://www.opentravel.org/OTA/2003/05/beta
ns raw http://tds.sabre.com/itinerary
ns ns4 http://webservices.sabre.com/pnrconn/ReaccSearch
ns or112 http://services.sabre.com/res/or/v1_12
ns soapenv http://schemas.xmlsoap.org/soap/envelope/
var jsonReq=vars.originalReq.request
fun getPassenger
(nameId) =  payload.GetReservationRS.Reservation.PassengerReservation.Passengers.*Passenger filter ((i,j) -> (i.@nameId == nameId))
fun getPassengerNS
(nameId) =  payload.stl18#GetReservationRS.stl18#Reservation.stl18#PassengerReservation.stl18#Passengers.*stl18#Passenger filter ((i,j) -> (i.@nameId == nameId)) 
 
fun getPassengerReferenceNumNS (nameId) = getPassengerNS(nameId).@referenceNumber[0]
fun getAncillaryService (id) = getAncillaryServiceNS(id)
fun getAncillaryServiceNS
(id)= payload.stl18#GetReservationRS.stl18#Reservation.stl18#PassengerReservation.stl18#Passengers.*stl18#Passenger.stl18#AncillaryServices.stl18#AncillaryService filter ((i,j) -> (i.@id == id))
---
{
	soapenv#Envelope: {
		soapenv#Body: {
			ns6#PaymentRQ @(
		"SystemDateTime":jsonReq.pos.localDateTime,
		"Version":"3.0.0"
	): {
				ns6#Action: "OrchPayment",
				ns6#POS 
		@("PseudoCityCode": payload.GetReservationRS.Reservation.POS.Source.@PseudoCityCode,
			"AgentSine": jsonReq.pos.sine,
			"LNIATA": jsonReq.pos.lniata,
			"StationNumber": jsonReq.pos.aaa.number,
			"ISOCountry": jsonReq.pos.aaa.country,
			"ChannelID": jsonReq.pos.channel,
			"LocalDateTime": jsonReq.pos.localDateTime,
			"SourceID": jsonReq.pos.source
		): {
				},
				ns6#MerchantDetail @("MerchantID": jsonReq.pos.company): {
				},
				ns6#OrderDetail @("RecordLocator": jsonReq.pnr) : {
					(jsonReq.orderDetails.passengerDetails map (item,index) -> {
						ns6#PassengerDetail @(
					"NameNumberInPNR": item.nameNumber,
					"PsgrType": getPassenger(item.nameNumber).@referenceNumber[0]): {
							(jsonReq.ticketingData.emd.emdDocuments map (emdDocuments, docIndex) -> {
								(ns6#Document @("DocType":"EMD",
										"DocCurrency": getPassenger(item.nameNumber).AncillaryServices.AncillaryService.TotalTTLPrice.Currency[0],
										"DocAmount":getPassenger(item.nameNumber).AncillaryServices.AncillaryService.TotalTTLPrice.Price[0],
										"AssociatedDocNumber":emdDocuments.documentAssociation[0].ticketNumber
						): {
								}
						) if (getPassenger(item.nameNumber).AncillaryServices.AncillaryService.@id[0] == emdDocuments.aeItemId)
							})
						}
					})
				},
				ns6#PaymentDetail: jsonReq.paymentData.payments map ((item, index) -> {
					ns6#FOP @("Type":"CC", "FOP_Code":item.cardCode): {
					},
					ns6#PaymentCard @(
				"CardCode":item.cardCode,
				"CardNumber":item.cardNumber,
				"CardSecurityCode":item.cardSecurityCode,
				"ExpireDate":item.expirationDate): {
						ns6#CardHolderName @(
						"FirstName":item.cardHolder.firstName,
						"LastName":item.cardHolder.lastName
					): {
						}
					},
					ns6#AmountDetail @(
					"Amount":item.details.amount.value,
					"CurrencyCode":item.details.amount.currency
				): {
					}
				})
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
	</flow>
	<flow name="flow_payment" doc:id="0618c15b-28c9-47b6-9ac4-b4d69d067f46" >
		<flow-ref doc:name="payment_flow" doc:id="5972e764-9975-4c56-8c1a-d87ee7e836d8" name="payment_flow"/>
		<set-variable value="#[payload.Envelope.Body]" doc:name="paymentRS" doc:id="0eb06d79-e426-4bea-8464-f57d11fc7859" variableName="paymentRS"/>
		<ee:transform doc:name="Transform Message" doc:id="ea6f89df-17b8-4a6c-9993-cad6254f846d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml inlineCloseOn="empty"
ns ns2 http://www.sabre.com/ns/Ticketing/misc/1.0
ns ns1 http://services.sabre.com/STL/v01
ns stl16 http://webservices.sabre.com/pnrbuilder/v1_16
ns soapenv http://schemas.xmlsoap.org/soap/envelope/
var jsonReq=vars.originalReq.request
fun getPassenger (nameId) =  (getPassengerNS(nameId).LastName)[0]
fun getPassengerNS
(nameId) =  payload.GetReservationRS.Reservation.PassengerReservation.Passengers.*Passenger filter ((i,j) -> (i.@nameId == nameId)) 

---
{
	soapenv#Envelope: {
		soapenv#Body: {
			ns2#CollectMiscFeeRQ @(
		"version":"1.4.1"
	): {
				ns1#AgentPOS @(
			"company":vars.originalReq.request.pos.company,
			"lniata":vars.originalReq.request.pos.lniata,
			"sine":vars.originalReq.request.pos.sine
		): {
					ns1#AAA: "ERF"
				},
				ns1#Transaction @("code":"EMD"): {
				},
				ns1#Parameters: {
					ns1#PrinterLniata: "*ETKT*"
				},
				(jsonReq.orderDetails.passengerDetails map (item, index) -> {
					ns1#Fees: {
						ns1#Linked: {
							ns1#Customer @(
					"lastName":getPassengerNS(item.nameNumber).LastName[0],
					"firstName": getPassengerNS(item.nameNumber).FirstName[0]
				): {
								ns1#CustomerDetails @(
						"nameRefNumber":item.nameNumber,
						"pnrLocator":vars.originalReq.request.pnr
					): {
								}
							},
							ns1#Fee : {
								(jsonReq.ticketingData.emd.emdDocuments map (emdDoc , docIndex) -> {
									(ns1#FeeDetails @(
							"code":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.RficSubcode[0],
							"quantity":1
						): {
										ns1#Base @(
								"currencyCode":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0],
								"currency":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0]
							): getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Price[0],
										ns1#TotalTax @(
								"currencyCode":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0],
								"currency":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0]
							): 0,
										ns1#Total @(
								"currencyCode":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0],
								"currency":getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Currency[0]
							): getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.TTLPrice.Price[0],
									}) if(emdDoc.aeItemId == getPassengerNS(item.nameNumber).AncillaryServices.AncillaryService.@id[0])
								})
							}
						}
					}
				}),
				ns1#TotalCost @(
			"currencyCode":jsonReq.paymentData.payments[0].details.amount.currency,
			"currency":jsonReq.paymentData.payments[0].details.amount.currency
		): vars.originalReq.request.paymentData.payments[0].details.amount.value,
				ns1#Payment : {
					ns1#Amount @(
				"currencyCode":jsonReq.paymentData.payments[0].details.amount.currency,
			"currency":jsonReq.paymentData.payments[0].details.amount.currency
			): vars.originalReq.request.paymentData.payments[0].details.amount.value,
					ns1#FormOfPayment: {
						ns1#CreditCard @("transactionID":payload.PaymentRS.Results[0].AuthorizationResult.@SupplierTransID): {
							ns1#Code: jsonReq.paymentData.payments[0].cardCode,
							ns1#Number: jsonReq.paymentData.payments[0].cardNumber,
							ns1#ExpiryDate: (jsonReq.paymentData.payments[0].expirationDate)[5 to 6] ++ (jsonReq.paymentData.payments[0].expirationDate)[2 to 3],
							ns1#SecurityCode: jsonReq.paymentData.payments[0].cardSecurityCode,
							ns1#ApprovalCode: payload.PaymentRS.Results[0].AuthorizationResult.@ApprovalCode
						}
					}
				},
				ns1#DetailLevel: "Full"
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
	</flow>
	<flow name="flow_miscfee" doc:id="2c07dbef-c934-4f31-a314-304847bba6d3" >
		<flow-ref doc:name="misc_flow" doc:id="7820876f-4886-45a8-8db0-d2a93fb20e45" name="miscfee_flow"/>
		<set-variable value="#[payload.Envelope.Body]" doc:name="miscfeeRS" doc:id="7ebdfec5-630a-4a44-905a-a66bc8bfa790" variableName="miscfeeRS"/>
	</flow>
	<flow name="flow_fraud" doc:id="c696cce2-a5f1-48ee-a8ad-38961d0560f1" >
		<choice doc:name="Choice" doc:id="60a5c893-bafa-48d8-9981-743321ee83f2" >
			<when expression="#[vars.originalReq.request.paymentData.postTicketingFraudCheckEnabled == true]">
				<ee:transform doc:name="Transform Message" doc:id="bdf9381f-13ed-4fa3-bebc-86b41b8a13cc">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/xml inlineCloseOn="empty"
ns ns4 http://www.opentravel.org/OTA/2003/05/beta
ns stl18 http://webservices.sabre.com/pnrbuilder/v1_18
ns ns0 http://schemas.xmlsoap.org/soap/envelope/
var jsonReq=vars.originalReq.request
var reserRes = vars.getreservationRS.GetReservationRS
fun getPassenger
(nameId) =  reserRes.Reservation.PassengerReservation.Passengers.*Passenger filter ((i,j) -> (i.@nameId == nameId))
fun getPassengerNS
(nameId) =  reserRes.Reservation.PassengerReservation.Passengers.*Passenger filter ((i,j) -> (i.@nameId == nameId)) 
 
fun getPassengerReferenceNumNS (nameId) = getPassengerNS(nameId).@referenceNumber[0]
fun getAncillaryService (RficSubcode) = (getAncillaryServiceNS(RficSubcode).TotalTTLPrice)[0]
fun getAncillaryServiceNS
(RficSubcode)= reserRes.Reservation.PassengerReservation.Passengers.*Passenger.AncillaryServices.AncillaryService filter ((i,j) -> (i.@id == RficSubcode))

---
{
	ns0#Envelope: {
		ns0#Body: {
			ns4#FraudCheckRQ @(
		"Version":"1.7.0"
	): {
				ns4#POS @(
			"PseudoCityCode":reserRes.Reservation.POS.Source.@PseudoCityCode,
			"StationNumber":"Station",
			"ISOCountry":reserRes.Reservation.POS.Source.@ISOCountry,
			"IP_Address": vars.httpAttributes.headers.host,
			"ChannelID":jsonReq.pos.channel,
			"LocalDateTime":jsonReq.pos.localDateTime
		): {
					ns4#BrowserDetail: {
						ns4#HttpHeaders: {
							(vars.httpAttributes.headers mapObject (value, key) -> {
								ns4#HttpHeader @(
							"Name":key
						): value
							})
						}
					}
				},
				ns4#MerchantDetail @("MerchantID": vars.originalReq.request.pos.company): {
				},
				ns4#OrderDetail @("RecordLocator": vars.originalReq.request.pnr) : {
					(jsonReq.orderDetails.passengerDetails map (item,index) -> {
						ns4#PassengerDetail @(
					"PsgrType": getPassengerReferenceNumNS(item.nameNumber)): {
							(jsonReq.ticketingData.emd.emdDocuments map (emdDocuments, docIndex) -> {
								(ns4#Document @("DocType":"EMD",
										"BaseFare":getAncillaryService(emdDocuments.aeItemId).Price
						): {
								}) if (getPassenger(item.nameNumber).AncillaryServices.AncillaryService.@id[0] == emdDocuments.aeItemId)
							})
						}
					})
				},
				ns4#PaymentDetail: {
					ns4#FOP @("Type":"CC"): {
					},
					(jsonReq.paymentData.payments map (item, index) -> {
						ns4#PaymentCard @(
				"CardCode":item.cardCode,
				"CardNumber":item.cardNumber,
				"CardSecurityCode":item.cardSecurityCode,
				"ExpireDate":item.expirationDate): {
							ns4#CardHolderName @(
						"FirstName":item.cardHolder.firstName,
						"LastName":item.cardHolder.lastName
					): {
							}
						},
						ns4#AmountDetail @(
					"Amount":item.details.amount.value,
					"CurrencyCode":item.details.amount.currency
				): {
						}
					})
				},
			}
		}
	}
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="fraudRS" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="fraud_flow" doc:id="647a017e-e5c8-419a-b930-26a7b770db08" name="fraud_flow" />
				<set-variable value="#[payload.Envelope.Body]" doc:name="Set Variable" doc:id="bde1ead0-63a8-4fbb-8be1-9decd93b6908" variableName="fraudRS"/>
			</when>
			<otherwise >
				<flow-ref doc:name="flow_update" doc:id="d1abba40-cc8f-4717-a260-577c8e45ba61" name="flow_update"/>
			</otherwise>
		</choice>
	</flow>
	<flow name="flow_update" doc:id="a176a948-0236-4827-9795-f6da665b4bcb" >
		<flow-ref doc:name="update_flow" doc:id="b6641696-ac80-4a89-866a-fc3883b0431c" name="update_flow"/>
		<ee:transform doc:name="Transform Message" doc:id="63c78a95-ad53-401f-bf12-abc67db11d95" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://schemas.xmlsoap.org/soap/envelope/
ns ns01 http://webservices.sabre.com/pnrbuilder/v1_18
---
{
	ns0#Envelope: {
		ns0#Body: {
			ns01#UpdateReservationRQ: {
				ns01#RequestType: "Stateless",
				ns01#ReturnOptions: "ABC",
				ns01#ReservationUpdateList: {
					ns01#Locator: "QTWMUM",
					ns01#ReservationUpdateItem:[
						ns01#RemarkUpdate: {
							ns01#RemarkText:"AUTH-PSS/AX5550/23AUG/01811535009367409119"
					}]
					
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="updateRS" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</flow>
</mule>
