<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="12c76885-a91c-4de0-b4ec-f4c6cd8868d8" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<flow name="fullfillmentFlow" doc:id="9badb4ca-85b6-450f-be7b-22b71bc01477" >
		<http:listener doc:name="Listener" doc:id="2328d2b0-89a0-411f-a9cb-b9fccbad1b5d" path="/fullfillment" config-ref="HTTP_Listener_config"/>
		<set-variable value="#[payload]" doc:name="Set Variable" doc:id="7e94de70-75fc-4d53-919e-c33c405c4489" variableName="originalReq"/>
		<ee:transform doc:name="Transform Message" doc:id="62ecfaf3-a02f-4924-906e-bd40c6c1700f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://schemas.xmlsoap.org/soap/envelope/
ns ns01 http://webservices.sabre.com/pnrbuilder/v1_18
---
{
	ns0#Envelope: {
		ns0#Body: {
			ns01#GetReservationRQ: {
				ns01#Locator: payload.request.pnr,
				ns01#RequestType: payload.request.orderDetails.passengerDetails."type",
				ns01#ReturnOptions: {
					ns01#ViewName: payload.request.orderDetails.passengerDetails.nameNumber,
					ns01#ResponseFormat: "application/xml"
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="getReservation_ref" doc:id="df5c57ed-dae0-4a72-b03e-d7ec1be0605f" name="getreservation_flow"/>
		<ee:transform doc:name="Transform_reservation" doc:id="727d5c24-6d73-4201-b697-636c470c560b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns stl18 http://webservices.sabre.com/pnrbuilder/v1_18
ns ns6 http://www.opentravel.org/OTA/2003/05/beta
ns raw http://tds.sabre.com/itinerary
ns ns4 http://webservices.sabre.com/pnrconn/ReaccSearch
ns or112 http://services.sabre.com/res/or/v1_12
ns soapenv http://schemas.xmlsoap.org/soap/envelope/


var jsonReq=vars.originalReq.request

fun getPassenger
(nameId) =  payload.GetReservationRS.Reservation.PassengerReservation.Passengers.*Passenger filter ((i,j) -> (i.@nameId == nameId))
fun getPassengerNS
(nameId) =  payload.stl18#GetReservationRS.stl18#Reservation.stl18#PassengerReservation.stl18#Passengers.*stl18#Passenger filter ((i,j) -> (i.@nameId == nameId)) 
 
fun getPassengerReferenceNumNS (nameId) = getPassengerNS(nameId).@referenceNumber[0]

fun getAncillaryService (id) = getAncillaryServiceNS(id)

fun getAncillaryServiceNS
(id)= payload.stl18#GetReservationRS.stl18#Reservation.stl18#PassengerReservation.stl18#Passengers.*stl18#Passenger.stl18#AncillaryServices.stl18#AncillaryService filter ((i,j) -> (i.@id == id))
---
{
	soapenv#Envelope:
{
 soapenv#Body:{
	ns6#PaymentRQ @(
		"SystemDateTime":jsonReq.pos.localDateTime,
		"Version":"3.0.0"
	): {
		ns6#Action:"OrchPayment", 
		ns6#POS 
		@("PseudoCityCode": payload.GetReservationRS.Reservation.POS.Source.@PseudoCityCode,
			"AgentSine": jsonReq.pos.sine,
			"LNIATA": jsonReq.pos.lniata,
			"StationNumber": jsonReq.pos.aaa.number,
			"ISOCountry": jsonReq.pos.aaa.country,
			"ChannelID": jsonReq.pos.channel,
			"LocalDateTime": jsonReq.pos.localDateTime,
			"SourceID": jsonReq.pos.source
		):{},
		ns6#MerchantDetail @("MerchantID": jsonReq.pos.company):{},
		ns6#OrderDetail @("RecordLocator": jsonReq.pnr) : {
			(jsonReq.orderDetails.passengerDetails map (item,index) -> {
				ns6#PassengerDetail @(
					"NameNumberInPNR": item.nameNumber,
					"PsgrType": getPassenger(item.nameNumber).@referenceNumber[0]): {
						(jsonReq.ticketingData.emd.emdDocuments map (emdDocuments, docIndex) -> {
							(ns6#Document @("DocType":"EMD",
										"DocCurrency": getPassenger(item.nameNumber).AncillaryServices.AncillaryService.TotalTTLPrice.Currency[0],
										"DocAmount":getPassenger(item.nameNumber).AncillaryServices.AncillaryService.TotalTTLPrice.Price[0],
										"AssociatedDocNumber":emdDocuments.documentAssociation[0].ticketNumber
						):{}
						) if (getPassenger(item.nameNumber).AncillaryServices.AncillaryService.@id[0] == emdDocuments.aeItemId) })
				}
		})},
		ns6#PaymentDetail: jsonReq.paymentData.payments map ((item, index) -> {
			ns6#FOP @("Type":"CC", "FOP_Code":item.cardCode):{},
			ns6#PaymentCard @(
				"CardCode":item.cardCode,
				"CardNumber":item.cardNumber,
				"CardSecurityCode":item.cardSecurityCode,
				"ExpireDate":item.expirationDate):{
					ns6#CardHolderName @(
						"FirstName":item.cardHolder.firstName,
						"LastName":item.cardHolder.lastName
					):{}
				},
				ns6#AmountDetail @(
					"Amount":item.details.amount.value,
					"CurrencyCode":item.details.amount.currency
				):{}
		})
	}
}
 }
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="Reference_flow2" doc:id="474fc5c2-d298-4e0a-bfd2-218262cc55ab" name="payment_flow"/>
	</flow>
</mule>
